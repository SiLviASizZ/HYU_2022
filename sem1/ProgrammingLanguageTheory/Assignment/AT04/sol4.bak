#lang racket
(provide (all-defined-out))

(define (check_bst x)
  (letrec ([check_left (lambda(i)
                    (if (null? i) #t (>(car x)(car i))))]
           [check_right (lambda(i)
                    (if (null? i) #t (<(car x)(car i))))]
      (and (check_left(cadr x))(check_right(caddr x))(check_bst(cadr x))(check_bst(caddr x)))))
           )