type : int * bool : is int and bool
type : int option : is int or no_data
int list : contains : int AND int list OR no_data

so , nest compound type building e.g. ((int*int) option) * (int list list)) option < ?


TYPES
Records : have named " fields " => connection to tuples

Build our own one-of types in ML ( e.g. int or string ) -> pattern-matching



Records : { f1 = v1, f2 = v2 ... } , f1 is a type
building in way above , Access from {#myfieldname e}
do not have to declare any record types

Tuple : shorter
Record : easier to remember ( usually a better choice ) => caller uses position  ,  callee uses variables .

Boolean operations
andalso orelse not

Datatype Bindings
-> to use them , First , check what variant it is , then Extract Data


CASE
All branches must have SAME TYPE

gerneral syntax of CASE : case e0 of p1=>e1 | p2=>e2 | ... | pn=>en

null, tl, ... => to pass arg to other functions ( sometimes convinient )

ML => Every function have one argument , looks like multiple arg ? it is a tuple pattern arg in function binding