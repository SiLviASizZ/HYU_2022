Functional programming
means ....
1. Avoid mutation in most/all cases
2. Using functions as VALUE
..
- style encouraging "recursion" and "recursive data structures"
- closer to mathematical definitions
- idioms using LAZINESS
- ?
- no clear YES or NO


first-class functions
: functions are values : 

can use a function as a parameter

Definition using let expression is better than at top-level if unnecessary

" Function binding is not an Expression "

fn and => Anonymous functions
Cannot use for RECURSIVE function : no name for making calls


Datatype : define a new type name , distinct from all existing types
type : just another name

More general types can be used as any less general type . => its okay

