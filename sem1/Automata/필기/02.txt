S -> aAb | lambda
A -> aAb | lambda
( = S->aAb, S->lambda, A->aAb. A->lambda 에 대응 )
new Grammar ( form above )



_____

finite automata
Deterministic finite acceptor
DFA
DFA is order set of 5
M = ( set of states, input alphabet, transition function, initial state, final states )
transion function : state 하나와 alphabet 하나를 가지고 state 를 결정
) initial state 은 하나만, final states 은 여러개 있을 수도 있음

Example
M = ({q0, g1, g2}, {0,1}, delta, q0, {q1})

delta(q0,0) = q0 / delta(q1, 0) = q0 / delta(q2,0) = q2
delta(q0,1) = q1 / delta(q1,1) = q2 / delta(q2,1) = q1

transion function 이 가장 중요 .
Q : 3개 , delta : 2개 므로 6개의 transion 이 있어야 한다.

DFA : 항상 모든 alphabet 에 대하여 나가는 edge 가 있어야함

현재 어떤 state에 있음 -> input alphabet 에 따라 다음 state 가 하나로 결정이 된다

DFA : 
finite : state 의 개수가 finite 하다는 뜻
Deterministic : 모든 input symbol 에 대하여 edge가 있음 -> 다음 state가 존재
Initial state -> accept / reject

input symbol 을 가지고 initial state 로부터 transition 을 수행 .
모든 transition 이 끝나고 finial state 에 있다 => input string 이 DFA에 의해서 Accept 되는 것
finial state 로 안 가면 Accept 되지 않음

delta star notation
delta(delta(q0,1),1) = delta star (q0,11)
delta star (q0, 11) = q2
given input string , q2 is final state


L(M) = { w in sigma star : delta star(q0, w) in Final state }
어떤 DFA에 의해 정의되는 Language : DFA 가 accept 하는 string 들의 set : initial state 로부터 transition 했을 때 final state 에 도달하는 string

Real Implementation on Programming : using Table ( textbook figure 2.3 )

trap state


