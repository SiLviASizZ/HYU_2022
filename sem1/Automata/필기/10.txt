L1 : regular ( r1 )
L2 : regular ( r2 )

L1 Union L2 => r1+r2 is REGULAR
we can explain through DFA
L1 concetenate L2 => r1r2 is REGULAR
L1 compliment => is REGULAR , hard to explain through regular expression , we can explain with DFA .
L1 and L2 => m*n statements, with this, we can make bigger DFA. => initial : pair of initials, final : if both are final => constructive prove

Union , Compliment : 닫혀있음 ..
L1 and L2 = ((L1 compliment) union (L2 compliment)) compliment => elements are regular , so its regular

L1 - L2 => L1 union ( L2 compliment ) , so it is regular


reversal : (reverse all of strings in Language) is regular


---

homomorphism
one symbol ( from sigma ) => to symbol ( from gamma )

h(a) = ab
h(b) = bbc
h(aba) = abbbcab
L = {aa, aba}
h(L) = {abab, abbbcab} => homomorphism for language L

Language is regular => is h(L) regular ?

example :  sigma = { a,b } , gamma = { b,c,d } , h(a) = dbcc , h(b) = bdc
r = (a+b star)((aa) star) => h(r) = (dbcc+(bdc star))((dbccdbcc) star)

given regular Language => can find regular expression => trans with homomorphism .. 

-----

def 4.2 . L1 / L2 = { x:xy in L1 for some y in L2 } => 뒤에다가 L2의 아무 string 을 붙여서 L1의 string이 되는 것

example : L1 is ( a^n * b^m , n >=1 , m >= 0 ) union ( ba )
	L2 is b^m , m >= 1
	L1 / L2 = ( a^m * b^m : n>=1 , m>=0 )

making DFA => delete .. unreachable from initial

L1 에 L2 를 붙이면 final 로 가는지 안가는지 어떻게 아느냐 ..
=> 이 DFA를 .. initial state 를 바꿔야함 . 
=> L2에 해당하는 DFA를 만든다
=> 두 DFA의 intersection 을 만든다
두 DFA의 initial state 에서 시작해서 final state 에 도달하는 string 을 accept 하는 DFA .
=> 그 DFA가 accept 하는 language 가 공집합인가 ?
how to know ? initial state 부터 시작해서 depth-first search 해서 final 에 도달가능한지 보면 됨

final state 를 정하는 것 => 하나라도 있으면 된다

----

standard representation  :  regular expression / dfa / regular grammar . one of it
language L 이 주어지고 string w 이 주어졌을 때 , w 가 L 에 포함되는지 결정하는 알고리즘이 있다.
How ? regular expression => dfa 변환 => 주어진 string 을 갖고 transition 을 해보면 됨 ...

Language L ( in Standard representation ) => L is finite ? infinite ? empty ?
구별할 수 있다
empty 구별 => initial state 에서 dfs , final 로 가는지 보면됨
DFA 로 표현했을 때 , infinite => cycle 이 있어야 함 ( finite automata : state 가 유한 개 )
이 cycle 이 initial state에서 final state 로 가는 길에 있어야 함
1. initial state => cycle reachable 2. cycle => final state reachable


standard representation => 
L1 = L2 ? => ( L1 - L2 ) Union ( L2 - L1 ) is emptyset
