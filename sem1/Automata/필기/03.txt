정규언어 ( Regular Language )
DFA를 가지고 받아들일 수 있는 언어 => 모든 언어가 정규언어는 아님

DFA로 받아들일 수 없는 언어도 있음 .
a^n b^n 같은거

making DFA which represents a Language ( Accept given statements )

L^2 : All of the possible statements

Practice through Textbook examples..


---

NFA
non-deterministic finite acceptor
그림 그리는 건 똑같은데 , non-deterministic 하다

Definition
M = { Q , sigma , delta , q0 , F } # SIMILAR TO DFA ...
Q : set of statement
sigma : input alphabet
delta : transitions ( meaning edge )
q0 : Start state
F : Final state

Different TRANSITION FUNCTION compare to DFA

DFA : delta : Q x sigma -> Q
NFA : delta : Q x ( SIGMA union {lambda} ) -> 2^Q

DFA : one edge for each state
NFA : one state -> can be one of multiple states

there is Lambda transition on NFA ..
나가는 edge가 없는 state ? : 원래는 정의를 해야하는데 ... NFA 에서는 omit 하기도한다

string accepted by NFA ??

detla ( from, input ) = result ( form of set in case of lambda ) :: lambda can not only mean nothing , but lambda itself .
so .... when input is lambda , it can go anywhere in result set . if at least one statement goes to final state , it is accepted

it is hard to explane " cannot " on NFA . cuz we have to try everything .. some easy case ( trap state )

delta star ( q1, a ) = ??
delta star ( q2, lambda ) = ??
delta star ( from, string ) = result .... )))

in transition on NFA , no edge state for input? => CONSIDER LAMBDA !!
delta star ( q1, a ) => delta star ( q1 , lambda^n a lambda^m )
delta star ( q1 , aa ) => delta star ( q1 , lambda^n a lambda^m a lambda^l )

... NFA characteristic : movement following transition => lots of case , hard to follow
DFA : Graph is complex , but following transition is simple, just we can follow graph ..

DFA is a special case of NFA . no lambda transition + result is the only state .

두 Acceptor 의 표현력이 같다 .. 단지 NFA 보다 DFA가 state를 많이 그릴 뿐. NFA : n edge ? => DFA : O(2^n) edge
think about subset ..


NFA 가 Accept 하는 Language ( different definition to DFA )
DFA : one transition set for one string , one result state , compare that one to final state
NFA : multiple result . at least one result in final state => Accepted string . set of Accepted string => Language accepted by NFA


DEAD CONFIGURATION : in case of NFA , we can omit transition that have no possibility to go to final state

When we go on programming , we change NFA to DFA , but 설계는 DFA 가 편하다 .
NFA => DFA Transformation ::: automatically changes by compiler , ... etc

Regular expressions -> NFA -> DFA ...

